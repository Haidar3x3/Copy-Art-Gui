-- Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local GuiService = game:GetService("GuiService")

-- Player setup
local player = Players.LocalPlayer
local Character = player.Character or player.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local RootPart = Character:WaitForChild("HumanoidRootPart")

-- ===== VALKYRON NAMETAG SYSTEM =====
local User = game:GetService("Players").LocalPlayer

-- ===== CONFIGURATION ===== --
local SETTINGS = {
    Name = "Valkyron",
    
    Font = {
        Type = "Custom",
        CustomId = 12187374765,  -- Playfair Display
        Size = 28                -- Slightly larger for impact
    },
    
    ColorMode = "TriColorWave",  -- Special blue-white-yellow mode
    
    WaveColors = {
        Color3.fromRGB(0, 100, 255),   -- Deep blue
        Color3.fromRGB(255, 255, 255),  -- Pure white
        Color3.fromRGB(255, 255, 150)   -- Light yellow
    },
    
    WaveSpeed = 1.8,
    WaveWidth = 0.35
}
-- ===== END CONFIGURATION ===== --

local FONT_FACE = Font.new("rbxassetid://"..SETTINGS.Font.CustomId)

local function getTriColorWave(letterIndex, time)
    local position = (letterIndex * SETTINGS.WaveWidth) - (time * SETTINGS.WaveSpeed)
    local wavePos = (math.sin(position) + 1) / 2  -- Normalized 0-1
    
    if wavePos < 0.5 then
        -- Blend between blue and white
        return SETTINGS.WaveColors[1]:Lerp(SETTINGS.WaveColors[2], wavePos * 2)
    else
        -- Blend between white and yellow
        return SETTINGS.WaveColors[2]:Lerp(SETTINGS.WaveColors[3], (wavePos - 0.5) * 2)
    end
end

local function updateNametag()
    if not User.Character then return end
    local head = User.Character:FindFirstChild("Head")
    if not head then return end
    local nametag = head:FindFirstChild("Nametag") or head:WaitForChild("Nametag", 2)
    if not nametag then return end
    
    local textLabel = nametag:FindFirstChild("TextLabel")
    if not textLabel then return end

    textLabel.FontFace = FONT_FACE
    textLabel.TextSize = SETTINGS.Font.Size
    textLabel.TextStrokeTransparency = 0.7  -- Subtle outline for readability
    
    local richText = ""
    local currentTime = tick()
    
    for i = 1, #SETTINGS.Name do
        local letter = SETTINGS.Name:sub(i,i)
        local color = getTriColorWave(i, currentTime)
        
        richText ..= string.format(
            '<font color="rgb(%d,%d,%d)">%s</font>',
            math.floor(color.r * 255),
            math.floor(color.g * 255),
            math.floor(color.b * 255),
            letter
        )
    end
    
    textLabel.RichText = true
    textLabel.Text = richText
end

-- Initialize with error handling
if not getgenv().valkyronNametagActive then
    getgenv().valkyronNametagActive = true
    
    local success, err = pcall(function()
        game:GetService("RunService").Heartbeat:Connect(updateNametag)
        updateNametag()  -- Initial update
    end)
    
    if not success then
        warn("Nametag Error: "..tostring(err))
    end
end

-- ===== ANTI-VOID PLATE =====
local parent = workspace:FindFirstChild("main island") or workspace
local antiVoid = Instance.new("Part")
antiVoid.Name = "anti void"
antiVoid.Size = Vector3.new(1.5, 2048, 2048)
antiVoid.CFrame = CFrame.new(
    -4.08799744, -8.92285156, 1.83599997,
    -1.1920929e-07, 1.00000012, 0,
    -1.00000012, -1.1920929e-07, -0,
    -0, 0, 1
)
antiVoid.Rotation = Vector3.new(0, 0, -90)
antiVoid.Anchored = true
antiVoid.CanCollide = true
antiVoid.Transparency = 1
antiVoid.CastShadow = false
antiVoid.Parent = parent

-- ===== VFX SYSTEM =====
local lastSpawnTime = 0
local spawnDelay = 0.25
local vfxConnection = nil

local function spawnVFX()
    local currentTime = os.clock()
    if currentTime - lastSpawnTime >= spawnDelay and ReplicatedStorage:FindFirstChild("slapstick") then
        pcall(function()
            ReplicatedStorage.slapstick:FireServer("fullcharged")
            lastSpawnTime = currentTime
        end)
    end
end

local function startVFX()
    if vfxConnection then
        vfxConnection:Disconnect()
    end
    
    vfxConnection = RunService.Heartbeat:Connect(function()
        if Humanoid.MoveDirection.Magnitude > 0 then
            spawnVFX()
        end
    end)
end

-- ===== GRAVITY & SPEED LOOP =====
local function MaintainEnvironment()
    while true do
        workspace.Gravity = 80
        if Humanoid then
            Humanoid.WalkSpeed = 40
        end
        task.wait(10)
    end
end

task.spawn(MaintainEnvironment)

-- ===== DELAYED LOADSTRING SYSTEMS (5 SECONDS) =====
task.delay(5, function()
    pcall(function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/Haidar3x3/Copy-Art-Gui/refs/heads/main/Force%20slap%20on%20lobby", true))()
    end)
    
    pcall(function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/Haidar3x3/Copy-Art-Gui/main/Hitbox", true))()
    end)
end)

-- ===== ANIMATION SYSTEMS =====
local idleAnimation = Instance.new("Animation")
idleAnimation.AnimationId = "rbxassetid://17737989045"
local idleTrack = Humanoid:LoadAnimation(idleAnimation)

local tapAnimation = Instance.new("Animation")
tapAnimation.AnimationId = "rbxassetid://16144851032"
local tapTrack = Humanoid:LoadAnimation(tapAnimation)

local function TeleportAndAnimate()
    RootPart.CFrame = CFrame.new(Vector3.new(2.81, 154.89, -221.13))
    if idleTrack then
        idleTrack:Stop()
        idleTrack:Play()
    end
end
TeleportAndAnimate()

-- ===== RIGHT-SIDE ONLY MOBILE TAP SYSTEM =====
local tapCooldown = false
local screenCenter = 0

local function GetScreenInfo()
    local screenSize = workspace.CurrentCamera.ViewportSize
    screenCenter = screenSize.X / 2
end

GetScreenInfo()
workspace.CurrentCamera:GetPropertyChangedSignal("ViewportSize"):Connect(GetScreenInfo)

UserInputService.TouchStarted:Connect(function(input, gameProcessed)
    if not gameProcessed and (UserInputService:GetPlatform() == Enum.Platform.Android or UserInputService:GetPlatform() == Enum.Platform.IOS) then
        if input.Position.X > screenCenter then
            if not tapCooldown and Humanoid.Health > 0 then
                tapCooldown = true
                
                if tapTrack then
                    tapTrack:Stop()
                    tapTrack:Play()
                end
                
                task.wait(1)
                tapCooldown = false
            end
        end
    end
end)

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if input.UserInputType == Enum.UserInputType.MouseButton1 and not gameProcessed then
        if not tapCooldown and Humanoid.Health > 0 then
            tapCooldown = true
            
            if tapTrack then
                tapTrack:Stop()
                tapTrack:Play()
            end
            
            task.wait(1)
            tapCooldown = false
        end
    end
end)

-- ===== RESPAWN HANDLER =====
player.CharacterAdded:Connect(function(newChar)
    Character = newChar
    Humanoid = newChar:WaitForChild("Humanoid")
    RootPart = newChar:WaitForChild("HumanoidRootPart")
    idleTrack = Humanoid:LoadAnimation(idleAnimation)
    tapTrack = Humanoid:LoadAnimation(tapAnimation)
    TeleportAndAnimate()
    updateNametag()
    startVFX() -- Restart VFX on respawn
end)

-- Start initial VFX
startVFX()

print("All systems activated with VFX")
